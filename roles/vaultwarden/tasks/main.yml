---
- name: Create Vaultwarden container path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/vaultwarden"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create Vaultwarden container data path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/vaultwarden/vw-data"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create Vaultwarden container ssl certs path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/vaultwarden/ssl_certs"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create Vaultwarden backups path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/vaultwarden/database_backups"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Watchtower Container
  community.docker.docker_container:
    name: watchtower
    image: containrrr/watchtower:latest
    detach: yes
    env:
      WATCHTOWER_POLL_INTERVAL: "604800"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    pull: yes

- name: Allow https
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "443"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow https ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "443"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Save Iptables Rules
  community.general.iptables_state:
    ip_version: ipv4
    table: filter
    state: saved
    path: /etc/iptables/rules.v4
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Save Iptables Rules ipv6
  community.general.iptables_state:
    ip_version: ipv6
    table: filter
    state: saved
    path: /etc/iptables/rules.v6
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Copy fullchain pem file
  ansible.builtin.copy:
    src: "/etc/letsencrypt/live/{{ ssl_cert }}/fullchain.pem"
    dest: "/home/{{ user_name }}/vaultwarden/ssl_certs/fullchain.pem"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Copy privkey pem file
  ansible.builtin.copy:
    src: "/etc/letsencrypt/live/{{ ssl_cert }}/privkey.pem"
    dest: "/home/{{ user_name }}/vaultwarden/ssl_certs/privkey.pem"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Vaultwarden container
  community.docker.docker_container:
    name: vaultwarden
    image: vaultwarden/server:latest
    detach: yes
    volumes:
      - /home/{{ user_name }}/vaultwarden/vw-data:/data
      - /home/{{ user_name }}/vaultwarden/ssl_certs:/ssl_certs
    env:
      ROCKET_TLS: '{certs="/ssl_certs/fullchain.pem",key="/ssl_certs/privkey.pem"}'
    published_ports:
      - "443:80/tcp"
    restart_policy: unless-stopped
    pull: yes

- name: Backup Vaultwarden Daily
  ansible.builtin.cron:
    name: "Backup Vaultwarden"
    special_time: daily
    job: sqlite3 /home/{{ user_name }}/vaultwarden/vw-data/db.sqlite3 ".backup '/home/{{ user_name }}/vaultwarden/database_backups/db-$(date '+%Y%m%d-%H%M').sqlite3'"
